{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { getAuthData } from './storage'; ////////////////////////////////////////////////////////////////////////////////////////\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\nexport const getTokenData = () => {\n  const loginResponse = getAuthData();\n\n  try {\n    return jwtDecode(loginResponse.access_token);\n  } catch (error) {\n    return undefined;\n  }\n}; ////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n\nexport const isAuthenticated = () => {\n  const tokenData = getTokenData();\n  return tokenData && tokenData.exp * 1000 > Date.now() ? true : false;\n}; ////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n\nexport const hasAnyRoles = roles => {\n  if (roles.length === 0) {\n    return true;\n  }\n\n  const tokenData = getTokenData();\n\n  if (tokenData !== undefined) {\n    return roles.some(role => tokenData.authorities.includes(role));\n  }\n\n  return false;\n}; ////////////////////////////////////////////////////////////////////////////////////////","map":{"version":3,"sources":["C:/DevSuperior/wskp-bootcamp/rrm14-movieflix/frontweb/src/utils/auth.ts"],"names":["jwtDecode","getAuthData","getTokenData","loginResponse","access_token","error","undefined","isAuthenticated","tokenData","exp","Date","now","hasAnyRoles","roles","length","some","role","authorities","includes"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,WAA5B,C,CAEA;;AAQA;AAEA;AACA,OAAO,MAAMC,YAAY,GAAG,MAA6B;AACvD,QAAMC,aAAa,GAAGF,WAAW,EAAjC;;AAEA,MAAI;AACF,WAAOD,SAAS,CAACG,aAAa,CAACC,YAAf,CAAhB;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACd,WAAOC,SAAP;AACD;AACF,CARM,C,CASP;AAEA;;AACA,OAAO,MAAMC,eAAe,GAAG,MAAe;AAC5C,QAAMC,SAAS,GAAGN,YAAY,EAA9B;AACA,SAAOM,SAAS,IAAIA,SAAS,CAACC,GAAV,GAAgB,IAAhB,GAAuBC,IAAI,CAACC,GAAL,EAApC,GAAiD,IAAjD,GAAwD,KAA/D;AACD,CAHM,C,CAIP;AAEA;;AACA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAA4B;AACrD,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,IAAP;AACD;;AAED,QAAMN,SAAS,GAAGN,YAAY,EAA9B;;AAEA,MAAIM,SAAS,KAAKF,SAAlB,EAA6B;AAC3B,WAAOO,KAAK,CAACE,IAAN,CAAYC,IAAD,IAAUR,SAAS,CAACS,WAAV,CAAsBC,QAAtB,CAA+BF,IAA/B,CAArB,CAAP;AACD;;AAED,SAAO,KAAP;AACD,CAZM,C,CAaP","sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport { getAuthData } from './storage';\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////\r\nexport type Role = 'ROLE_OPERATOR' | 'ROLE_ADMIN';\r\n\r\nexport type TokenData = {\r\n  exp: number;\r\n  user_name: string;\r\n  authorities: Role[];\r\n};\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////\r\nexport const getTokenData = (): TokenData | undefined => {\r\n  const loginResponse = getAuthData();\r\n\r\n  try {\r\n    return jwtDecode(loginResponse.access_token) as TokenData;\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n};\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////\r\nexport const isAuthenticated = (): boolean => {\r\n  const tokenData = getTokenData();\r\n  return tokenData && tokenData.exp * 1000 > Date.now() ? true : false;\r\n};\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////\r\nexport const hasAnyRoles = (roles: Role[]): boolean => {\r\n  if (roles.length === 0) {\r\n    return true;\r\n  }\r\n\r\n  const tokenData = getTokenData();\r\n\r\n  if (tokenData !== undefined) {\r\n    return roles.some((role) => tokenData.authorities.includes(role));\r\n  }\r\n\r\n  return false;\r\n};\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n"]},"metadata":{},"sourceType":"module"}