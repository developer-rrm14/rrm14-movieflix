{"ast":null,"code":"var _jsxFileName = \"C:\\\\DevSuperior\\\\wskp-bootcamp\\\\rrm14-movieflix\\\\frontweb\\\\src\\\\components\\\\PrivateRoute\\\\index.tsx\";\nimport { Redirect, Route } from 'react-router-dom';\nimport { hasAnyRoles, isAuthenticated } from 'utils/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = _ref => {\n  let {\n    children,\n    path,\n    roles = []\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Route, {\n    path: path,\n    render: _ref2 => {\n      let {\n        location\n      } = _ref2;\n      return !isAuthenticated() ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: '/',\n          state: {\n            from: location\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this) : !hasAnyRoles(roles) ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this) : children;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["C:/DevSuperior/wskp-bootcamp/rrm14-movieflix/frontweb/src/components/PrivateRoute/index.tsx"],"names":["Redirect","Route","hasAnyRoles","isAuthenticated","PrivateRoute","children","path","roles","location","pathname","state","from"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAAmD,YAAnD;;;AAQA,MAAMC,YAAY,GAAG,QAA2C;AAAA,MAA1C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA,KAAK,GAAG;AAA1B,GAA0C;AAC9D,sBACE,QAAC,KAAD;AACE,IAAA,IAAI,EAAED,IADR;AAEE,IAAA,MAAM,EAAE;AAAA,UAAC;AAAEE,QAAAA;AAAF,OAAD;AAAA,aACN,CAACL,eAAe,EAAhB,gBACE,QAAC,QAAD;AACE,QAAA,EAAE,EAAE;AACFM,UAAAA,QAAQ,EAAE,GADR;AAEFC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAEH;AAAR;AAFL;AADN;AAAA;AAAA;AAAA;AAAA,cADF,GAOI,CAACN,WAAW,CAACK,KAAD,CAAZ,gBACF,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADE,GAGFF,QAXI;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CApBD;;KAAMD,Y;AAsBN,eAAeA,YAAf","sourcesContent":["import { Redirect, Route } from 'react-router-dom';\r\nimport { hasAnyRoles, isAuthenticated, Role } from 'utils/auth';\r\n\r\ntype Props = {\r\n  children: React.ReactNode;\r\n  path: string;\r\n  roles?: Role[];\r\n};\r\n\r\nconst PrivateRoute = ({ children, path, roles = [] }: Props) => {\r\n  return (\r\n    <Route\r\n      path={path}\r\n      render={({ location }) =>\r\n        !isAuthenticated() ? (\r\n          <Redirect\r\n            to={{\r\n              pathname: '/',\r\n              state: { from: location },\r\n            }}\r\n          />\r\n        ) : !hasAnyRoles(roles) ? (\r\n          <Redirect to=\"/\" />\r\n        ) : (\r\n          children\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n"]},"metadata":{},"sourceType":"module"}